 {cfg}←{updateTatinVars}EditPackageConfigFile y;refToTatinVars;projectPath;TC;cfgFilename;cfgOrig;ns;newCfg;data;success;ref
⍝ Allows the user to edit the package config file of a particular project identified by a ref pointing
⍝ to a `TatinVars` namespace in the workspace specified as right argument.
⍝ Alternativly you can specify a path to a folder hosting a package config file.\\
⍝ When a ref is passed as `⍵`, by default the function attempts to update `TatinVars.CONFIG`
⍝ in case of a change. You can prevent this from happening by passing a 0 as `⍺`.\\
⍝ If a path is specified as `⍵` the function does not know where to find any corresponding
⍝ `TatinVars`, and therefore no update can be performed; `⍺` is ignored in this case.\\
⍝ Returns the (possibly new) configuration but ⎕NULL in case the user cancelled the operation.
 TC←⎕SE._Tatin.Client
 :If {16::0 ⋄ ' '=1↑0⍴⍵}y ⍝ If it's a char vector it must be a path
     refToTatinVars←⎕NULL
     projectPath←y
     updateTatinVars←0
 :Else
     refToTatinVars←y
     '⍵ is not a reference pointing to a TatinVars namespace?!'Assert 3=refToTatinVars.⎕NC'CONFIG'
     projectPath←refToTatinVars.HOME
     updateTatinVars←{0<⎕NC ⍵:⍎⍵ ⋄ 1}'updateTatinVars'
 :EndIf
 cfgFilename←projectPath,((⎕C TC.CFG_Name≢⎕C(-≢TC.CFG_Name)↑projectPath))/'/',TC.CFG_Name
 ('Not found: ',cfgFilename)Assert ⎕NEXISTS cfgFilename
 ns←TC.ReadPackageConfigFile cfgFilename
 cfgOrig←cfg←TC.Reg.JSON ns
 (success newCfg)←(CheckPackageConfigFile EditJson)'PackageConfigFile'cfg cfgFilename
 :If ¯1=success
     cfg←⎕NULL ⋄ →0
 :ElseIf success
 :AndIf newCfg≢cfgOrig
     ns←TC.Reg.JSON newCfg
     1 TC.WritePackageConfigFile projectPath ns
     refToTatinVars.⎕FX'r←CONFIG'('r←''',newCfg,'''') ⍝ Update TatinVars.CONFIG
 :EndIf
 cfg←TC.Reg.JSON newCfg
 ⍝Done
