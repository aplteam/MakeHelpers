(
 '## Overview'
 ''
 '`MakeHelpers` is a package that helps you building a new version of a package, or an application, or anything'
 'in between. It does not do the job for you, but it makes it easier.'
 ''
 'Many helpers work in any case, but some, like `EstablishProjectFolder`, only work in conjunction with the '
 'project manager [Cider](https://github.com/aplteam/Cider "Link to Cider on GitHub").'
 ''
 '## Highlights'
 ''
 '### Version numbers'
 ''
 'Until version 0.18.0 version numbers could be either ruled by a package configuration file or by a `Version` '
 'function. With version 0.18.0 a policiy change took place: the package file always rules, meaning that a'
 'function `Version` looks for `TatinVars.CONFIG` (which is established from a package config, and returns the'
 'version information from `TatinVars.CONFIG.version`.'
 ''
 '~~The `CompileVersionNumberPattern` and `IncreaseBuildIDInFunction` functions are intended to'
 'help manage version numbers, be it in a package config file or in a `Version` function which in turn can'
 'be a function in a normal namespace, in a scripted namespace or in a class.~~'
 ''
 'Now the recommended way is to allow the user to edit the package config file by calling `EditPackageConfigFile`.'
 'This also allows changing the version number. '
 ''
 'When a change takes place, `EditPackageConfigFile` tries to find the `TatinVars` namspace, and updates its'
 '`CONFIG` function by re-creating it with the changed data,   '
 ''
 'While a version number without a build number does not necessarily need to be updated when a new version is '
 'built, the build number will always be bumped in the process of creating a package.'
 ''
 '### Create installer EXE with Inno'
 ''
 '`MakeStandAloneRunTimeExe` requires the installer package "Inno" and creates an installer EXE with it, '
 'therefore this is Windows-only. `RemoveStuffButSetupExe` can then be used to remove stuff that is only '
 'required to create the installer EXE, but not afterwards.'
 ''
 ''
 '## List of helpers'
 ''
 'This is a list of all the helpers:'
 ''
 '| Helper                          | Comment |'
 '|---------------------------------|---------------------------------------------------------------------|'
 '| `CompileVersionNumberPattern` * | Returns a pattern like +0.1.0 after interrogating the user | '
 '| `ConvertMarkdownToHtml5`        | Converts all Markdown documents in a given folder to HTML5 |'
 '| `CopyBetter`                    | Copies the "better" (later) version of a document over if different |'
 '| `CopyLicenseFiles`              | Copies all appropriate license into a folder Licenses, but see `CreateNoticeFile` |'
 '| `CopyPackageFolderTo`           | Copies a package folder elsewhere |'
 '| `CopyTo`                        | Copies files and folders |'
 '| `CreateNoticeFile`              | Creates a file NOTICE.md and populates it with all appropriate licenses | '
 '| `CreateStandAloneExeParms`      | Creates a namespace with default parameters for building a SetUp.exe |'
 '| `CreateZipFile`                 | Creates a ZIP file from a folder |'
 '| `CR`                            | Carriage-Return  |'
 '| `DropBuildNumber`               | Drops the build number from a version number |'
 '| `EditPackageConfigFile`         | Edit the package config file and update TatinVars.CONFIG is sensible |'
 '| `EditVersion` *                 | Edit the version number from the package config file and save it |'
 '| `EditPackageConfigFile`         | Allows the user to edit the package config file specified via ⍵ |'
 '| `FetchLaterUserCommand`         | Syncronizes a script between, say, `MyUCMDs/` and the project |'
 '| `GetMyUCMDsFolder`              | Returns the `MyUCMDs/` folder for the current OS|'
 '| `GetPackageCfg`                 | Reads a package config file and returns it as a namespace |'
 '| `GetProjectCfg`                 | Reads a Cider project config file and returns it as a namespace |'
 '| `GetUserHomeFolder`             | Returns the user''s home folder for the current OS  |'
 '| `IncreaseBuildIDInFunction` *   | Increases the build number or ads "+1" if there is none yet in ⍵ |'
 '| `IsBetaVersion`                 | Checks if ⍵ is a beta version and returns a 1 if so, otherwise 0 | '
 '| `MakeStandAloneRunTimeExe`      | Creates a SetUp.exe with Inno |'
 '| `Pause`                         | Displays a message and stops till the user presses <enter> | '
 '| `PutPackageCfg`                 | Saves a package config on disk. The reverse of GetPackageCfg |'
 '| `RecreateFolder`                | Forcibly deletes a folder and then recreates it  |'
 '| `RemoveStuffButSetupExe`        | Delete everything from a folder except a SetUp.exe  |'
 '| `Select`                        | Allows the user to select an option from a list |'
 '| `SplitVersionFromBuildNumber`   | Returns version number and build number as a two-element vector'
 '| `UpdateVersionNumberInInno_ISS` | Acts on Inno config files for creating an EXE |'
 '| `YesOrNo`                       | Ask a Yes/No question  |'
 '| `Version`                       | Returns the version number from the package config file |'
 ''
 '    * Now depricated, use `EditPackageConfigFile` instead. These function will be removed before version'
 '      1.0 is established.'
)
