 {r}←{savePath}CreateAPI y;refTosourceNS;names;API_name;b;targetNamespace;Tref;name;flag;type;backRef;at;header;extension;fullName;res;filename;body;Tref2;backRef2
⍝ Deletes and then re-creates a namespace `API_Name` within `refTosourceNS` and then establishes cover
⍝ fns/oprs for fns/opr and functions returning references (variables, namespaces, classes, interfaces)
⍝ as API (public interface).\\
⍝ If you wish you may specify `API_name` as a fully qualified name which is useful mostly for test cases.
⍝ If you don't then the API namespace it is assumed to live inside `refTosourceNS`.\\
⍝ `⍵` must be a vector of length 2 or 3:\\
⍝ [1] `refTosourceNS` (mandatory)  = name of the source namespace\\
⍝ [2] `names`         (mandatory)  = list of all public names, typically returned by a fn named `Public`\\
⍝ [3] `API_name`      (optional)   = the name of the target namespace; defaults to "API"\\
⍝ By default Link is told about everything that got created.
⍝ You may specify a folder via `⍺` which must exist.
⍝ If you do then all fns/opr are saved within that folder **without** involving Link.
⍝ If you don't want anything to be saved on disk at all then specify `''` as `⍺`.\\
⍝ Returns the number of fns/opr established.\\
⍝ Handles all kinds of objects: niladic, monadic, dyadic and ambivalent fns as well as
⍝ monadic and dyadic operators and namespaces, classes, interfaces and variables.\\
⍝ Supports one level of sub-namespaces.\\
⍝ It also honors shy results.\\
 r←0
 (refTosourceNS names API_name)←3↑y,⊂'API'
 :If 0=≢names
     names←(' '~⍨¨↓refTosourceNS.⎕NL⍳16)~⊂'API'
 :EndIf
 'Source namespace (1⊃⍵) is not a reference'Assert 0 1≡{(≡⍵)(≢⍵)}refTosourceNS
 'Source namespace (1⊃⍵) is not a namespace'Assert 0=+/'[]'∊refTosourceNS
 'Source namespace (1⊃⍵) is not a namespace'Assert 9.1≡⎕NC⊂⍕refTosourceNS
 b←~0 1∊⍨{'.'+.=⍵}¨names
 ('Dotted syntax not supported for more than one level: ',{0=≢⍵:'' ⋄ ⊃{⍺,', ',⍵}/⍵}b/names)Assert 0∧.=b
 savePath←{0<⎕NC ⍵:⍎⍵ ⋄ ¯1}'savePath'
 'No API names specified?!'Assert 0<≢names
 names←⊆names
 API_name←⍕{0<⎕NC ⍵:⍎⍵ ⋄ 'API'}'API_name'
 :If (⊃API_name)∊'#⎕'
     targetNamespace←API_name
 :Else
     targetNamespace←(⍕refTosourceNS),'.',API_name
 :EndIf
 :If 0<⎕NC targetNamespace
     :If 0<≢(⍎targetNamespace).⎕NL⍳16
         :Trap 0
             {}⎕SE.Link.Expunge targetNamespace
             ⎕DL 0.05
         :Else
             {}⎕SE.Link.Expunge targetNamespace
             ⎕DL 0.05
         :EndTrap
     :EndIf
 :EndIf
 Tref←⍎targetNamespace ⎕NS''
 b←{1='.'+.=⍵}¨names
 :If ∨/b    ⍝ Any sub namespaces?
     Tref.{⍵ ⎕NS''}¨∪{⍵↑⍨¯1+⍵⍳'.'}¨b/names
 :EndIf
 :If ¯1≢savePath
 :AndIf 0<≢savePath
     'Create!'F.CheckPath savePath
 :EndIf
 :If ∨/b←0=refTosourceNS.⎕NC↑names
     0 Assert⍨'Not found in ',(⍕refTosourceNS),': ',⊃{⍺,', ',⍵}/b/names
 :EndIf
 :For name :In names
     name~←' '
     flag←1
     type←refTosourceNS.⎕NC⊂name
     backRef←'##.'
     :If '.'∊name
         Tref2←Tref{⍺⍎⍵↑⍨¯1+⍵⍳'.'}name
         backRef2←backRef,backRef,({⍵↑⍨¯1+⍵⍳'.'}name),'.'
     :EndIf
     :If 3=⌊type        ⍝ Function?
         r+←1
         at←refTosourceNS.⎕AT name
         header←1⊃refTosourceNS.⎕NR name
         :If 0=1 2⊃at   ⍝ Niladic functions need special treatment
             header←{⍵↑⍨¯1+⌊/⍵⍳'⍝;'}header
             :If '←'∊header  ⍝ With result
                 :If '.'∊name
                     Assert' '=1↑0⍴Tref2.⎕FX header({('{}'~⍨1⊃⍵),'←',backRef2,(2⊃⍵)}'←'A.Split{⍵↑⍨¯1+⍵⍳'⍝'}header)
                 :Else
                     Assert' '=1↑0⍴Tref.⎕FX header({('{}'~⍨1⊃⍵),'←',backRef,(2⊃⍵)}'←'A.Split{⍵↑⍨¯1+⍵⍳'⍝'}header)
                 :EndIf
             :Else           ⍝ Without result
                 :If '.'∊name
                     Assert' '=1↑0⍴Tref2.⎕FX header({backRef2,⍵}{⍵↓⍨⍵⍳'.'}name)
                 :Else
                     Assert' '=1↑0⍴Tref.⎕FX header({backRef,⍵}{⍵↑⍨¯1+⍵⍳'⍝'}header)
                 :EndIf
             :EndIf
         :Else
             :If 2=|1 2⊃at
                 :If '{'=⊃A.DLB header
                     :If '.'∊name
                         backRef2 Tref2.{⍎⍵,'←{⍺←⊢ ⋄ 1:shy←⍺ ',⍺,⍵,' ⍵}'}{⍵↓⍨⍵⍳'.'}name
                     :Else
                         backRef Tref.{⍎⍵,'←{⍺←⊢ ⋄ 1:shy←⍺ ',⍺,⍵,' ⍵}'}name
                     :EndIf
                 :Else
                     :If '.'∊name
                         backRef2 Tref2.{⍎⍵,'←{⍺←⊢ ⋄ ⍺ ',⍺,⍵,' ⍵}'}{⍵↓⍨⍵⍳'.'}name
                     :Else
                         backRef Tref.{⍎⍵,'←{⍺←⊢ ⋄ ⍺ ',⍺,⍵,' ⍵}'}name
                     :EndIf
                 :EndIf
             :Else
                 :If '{'=⊃A.DLB header
                     :If '.'∊name
                         backRef(Tref{'.'∊⍵:⍺⍎⍵↑⍨¯1+⍵⍳'.' ⋄ ⍺}name).{⍎⍵,'←{1:shy←',⍺,⍵,' ⍵}'}{'.'∊⍵:⍵↑⍨¯1+⍵⍳'.' ⋄ ⍵}name
                     :Else
                         backRef Tref.{⍎⍵,'←{1:shy←',⍺,⍵,' ⍵}'}name
                     :EndIf
                 :Else
                     :If '.'∊name
                         backRef2 Tref2.{⍎⍵,'←{',⍺,⍵,' ⍵}'}{⍵↓⍨⍵⍳'.'}name
                     :Else
                         backRef Tref.{⍎⍵,'←{',⍺,⍵,' ⍵}'}name
                     :EndIf
                 :EndIf
             :EndIf
         :EndIf
     :ElseIf 4=⌊type     ⍝ Operator
         :Select 1 3⊃refTosourceNS.⎕AT name  ⍝ Syntax
         :Case 1 ⍝ monadic operator
             :If '.'∊name
                 backRef2 Tref2.{⍎⍵,'←{⍺←⊢ ⋄ 1:shy←⍺ (⍺⍺ ',⍺,⍵,') ⍵}'}{⍵↓⍨⍵⍳'.'}name
             :Else
                 backRef Tref.{⍎⍵,'←{⍺←⊢ ⋄ 1:shy←⍺ (⍺⍺ ',⍺,⍵,') ⍵}'}name
             :EndIf
         :Case 2 ⍝ dyadic operator
             :If '.'∊name
                 backRef2 Tref2.{⍎⍵,'←{⍺←⊢ ⋄ 1:shy←⍺ (⍺⍺ ',⍺,⍵,' ⍵⍵) ⍵}'}{⍵↓⍨⍵⍳'.'}name
             :Else
                 backRef Tref.{⍎⍵,'←{⍺←⊢ ⋄ 1:shy←⍺ (⍺⍺ ',⍺,⍵,' ⍵⍵) ⍵}'}name
             :EndIf
         :Else
             'An operator that is neither monadic nor dyadic?!'⎕SIGNAL 11
         :EndSelect
         r+←1
     :ElseIf type∊2.1 9.1 9.4 9.5   ⍝ Variable, Namespace, Class or Interface?
         :If '.'∊name
             Assert' '=1↑0⍴backRef2 Tref2.{⎕FX('r←',⍵)('r←',⍺,⍵)}{⍵↓⍨⍵⍳'.'}name
         :Else
             Assert' '=1↑0⍴backRef Tref.{⎕FX('r←',⍵)('r←',⍺,⍵)}name
         :EndIf
         r+←1
         extension←'aplf'
     :Else
         ⎕←'*** Ignored: ',name,' (name class=',(⍕type),')'
         flag←0
     :EndIf
     :If flag
     :AndIf API_name≢name
         :If ¯1≡savePath
             fullName←(⍕Tref),'.',name
             ⍝⎕DL 1
             'Huuh?!'Assert 9=⎕NC targetNamespace   ⍝ Hunting a LINK bug?!  ⍝TODO⍝ <02141>  (Mantis 21094)
             res←⎕SE.Link.Add fullName
             :If 0=∨/'Not in a linked namespace: '⍷res
                 ('Link.Add signalled a problem with ',fullName)Assert'Added: '{⍺≡(≢⍺)↑⍵}res
             :EndIf
         :ElseIf 0<≢savePath
             extension←'aplf'
             filename←name,'.',extension
             body←Tref.⎕NR name
             (⊂body)⎕NPUT(savePath,'/',filename)1
         :Else
             ⍝ User does not want to save anything.
         :EndIf
     :EndIf
 :EndFor
⍝Done
